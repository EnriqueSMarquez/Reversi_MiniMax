package MainPackage;
//////////////////////ENRIQUE MARQUEZ////////////////////
///////////////ASSIGNMENT 2 FOUNDATIONS OF AI//////////////
////THIS CLASS IS IN CHARGED OF RETURNING THE VALID MOVES////
//////IT CAN BE EITHER RANDOMDLY OR USING MINIMAX//////////
//////////////////UNIVERSITY OF SOUTHAMPTON///////////////
import java.awt.Point;
import java.util.ArrayList;
import java.util.List;

//OBJECT USED TO REPRESENT A NODE
class MovementObject{
	
	int[][] howMatrixWouldBe = new int[6][6]; //MATRIX OF THE NODE
	Point pointToPlace = new Point();
	int parent; //PARENT OF THE NODE
	int profit; //PROFIT OF THE NODE
	int whoAmI; //NUMBER OF NODE
	int whosTurnToGetThisObject; //GENERATED BY WHO
	
	public MovementObject() {
		
	}	
	//CONSTRUCTOR 1 INPUTS: MATRIX OF THE NODE AND REQUIRED MOVE TO GENERATE THIS NODE
	public MovementObject(int[][] matrix, Point location) {
		for(int i = 0;i < matrix.length;i++)
			for(int j = 0;j < matrix.length;j ++)
				howMatrixWouldBe[i][j] = matrix[i][j]; //COPY MATRIX
		
		pointToPlace = location; //COPY MOVE YO GENERATE THIS NODE
		this.profit = CalculateProfit(this.howMatrixWouldBe); //CALCULATE THE PROFIT
	}
	public MovementObject(Point location) {
		pointToPlace = location;
	}
	//CONSTRUCTOR 2 INPUTS: MATRIX, PARENT, AND NUMBER 
	public MovementObject(int[][] matrix, int parent, int whoAmI) {
		for(int i = 0;i < matrix.length;i++)
			for(int j = 0;j < matrix.length;j ++)
				howMatrixWouldBe[i][j] = matrix[i][j]; //COPY MATRIX
		this.profit = CalculateProfit(this.howMatrixWouldBe); //CALCULATE PROFIT OF THIS MATRIX (BLACKS MINIMAX)
		this.parent = parent;
		this.whoAmI = whoAmI;
	}
	
	public void setProfit(int profit) {
		this.profit = profit;
	}
	public int getProfit() {
		return profit;
	}
	//THIS METHOD REQUIRED THE MATRIX TO CALCULATE THE PROFIT, AND RETURNS THE PROFIT AS AN INTEGER
	//IT IS BASICALLY THE SUBSTRACTION BEETWEN BLACKS AND WHITES
	public int CalculateProfit(int[][] matrix){
		int carrier1 = 0, carrier2 = 0;
		for(int i = 0; i < matrix.length; i ++){
			for(int j = 0; j < matrix.length; j ++){
				if(matrix[i][j] == 1){
					carrier1 ++;
				}else if(matrix[i][j] == 2){
					carrier2 ++;
				}
			}
		}
		
		return (carrier1 - carrier2);
	}
	
	//SETTERS AND GETTERS
	public int getParent() {
		return parent;
	}
	public void setParent(int parent) {
		this.parent = parent;
	}
	public int getWhoAmI() {
		return whoAmI;
	}
	public void setWhoAmI(int whoAmI) {
		this.whoAmI = whoAmI;
	}
	public int getWhosTurnToGetThisObject() {
		return whosTurnToGetThisObject;
	}
	public void setWhosTurnToGetThisObject(int whosTurnToGetThisObject) {
		this.whosTurnToGetThisObject = whosTurnToGetThisObject;
	}
}
public class MovesClass {
	List<Point> listOfMovements = new ArrayList<Point>();
	List<MovementObject> objectArray = new ArrayList<MovementObject>();
	
//METHOD THAT RETURN THE VALID MOVEMENTS
public List<MovementObject> ValidMovements(int[][] workingMatrix, int whosTurn){
		List<Point> listOfPoints = new ArrayList<Point>();
		listOfPoints.clear();
		listOfMovements.clear();
		objectArray.clear();
		//FIND THE PIECES THAT BELONGS TO THE PLAYER AND STORE THEM IN A LIST OF POINTS
		for(int i = 0; i < workingMatrix.length; i++){
			for(int j = 0; j < workingMatrix.length; j++){
				if(workingMatrix[i][j] == whosTurn){
					listOfPoints.add(new Point(i,j)); 
				}
			}
		}
		//ADD ALL THE POSSIBLE HORIZONTAL MOVES
		objectArray.addAll(SearchInRows(workingMatrix, whosTurn, listOfPoints));
		//ADD ALL VERTICAL MOVES
		objectArray.addAll(SearchInColumns(workingMatrix, whosTurn, listOfPoints));
		//ADD ALL DIAGONALS MOVES
		objectArray.addAll(SearchInDiagonal(workingMatrix, whosTurn, listOfPoints));
		//CONCATENATE THE MOVES THAT CONAINS TWO SOLUTIONS
		CheckForDuplicatesPoints(objectArray,workingMatrix,whosTurn);
		return objectArray;
		
	}
	
	//HORIZONTAL
	private List<MovementObject> SearchInRows(int[][] matrixToSearch, int whosTurn, List<Point> listOfCards){
		int otherPlayer;
		List<Point> listOfPointsLocal = new ArrayList<Point>();
		List<MovementObject> objectArrayLocal = new ArrayList<MovementObject>();
		listOfPointsLocal.clear();
		listOfPointsLocal.addAll(listOfCards);
		int[][] tempMatrix = new int[6][6];
		//tempMatrix = matrixToSearc;
		if(whosTurn == 1)
			otherPlayer = 2;
		else otherPlayer = 1;
					
		while(!listOfPointsLocal.isEmpty()){
			//SOME CONDITIONS THAT WERE TAKEN IN COUNT
			//two to the left cannot be equal
			//cannot be 5 or 6
			//next one must be opponent card
			//two to the right must be blank
			//RIGHT SEARCH
			for(int i = 0;i < matrixToSearch.length;i++)
				for(int j = 0;j < matrixToSearch.length;j ++)
					tempMatrix[i][j] = matrixToSearch[i][j];
			if(listOfPointsLocal.get(0).y != 4 && listOfPointsLocal.get(0).y != 5 && 
					matrixToSearch[listOfPointsLocal.get(0).x][listOfPointsLocal.get(0).y + 2] != whosTurn
					&& matrixToSearch[listOfPointsLocal.get(0).x][listOfPointsLocal.get(0).y + 1] == otherPlayer){
				//CHECK IF ONLY ONE PIECE CONSECUTIVE
			if(matrixToSearch[listOfPointsLocal.get(0).x][listOfPointsLocal.get(0).y + 2] == 0){
				tempMatrix[listOfPointsLocal.get(0).x][listOfPointsLocal.get(0).y + 1] = whosTurn;
				tempMatrix[listOfPointsLocal.get(0).x][listOfPointsLocal.get(0).y + 2] = whosTurn;
				objectArrayLocal.add(new MovementObject(tempMatrix, new Point(listOfPointsLocal.get(0).x,listOfPointsLocal.get(0).y + 2)));
				//listOfMovements.add(new Point(listOfPointsLocal.get(0).x,listOfPointsLocal.get(0).y + 2));
			}
				//CHECK IF TWO CONSECUTIVES
			else if(listOfPointsLocal.get(0).y != 3 &&
					matrixToSearch[listOfPointsLocal.get(0).x][listOfPointsLocal.get(0).y + 2] == otherPlayer &&
					matrixToSearch[listOfPointsLocal.get(0).x][listOfPointsLocal.get(0).y + 3] == 0){
					tempMatrix[listOfPointsLocal.get(0).x][listOfPointsLocal.get(0).y + 1] = whosTurn;
					tempMatrix[listOfPointsLocal.get(0).x][listOfPointsLocal.get(0).y + 2] = whosTurn;
					tempMatrix[listOfPointsLocal.get(0).x][listOfPointsLocal.get(0).y + 3] = whosTurn;
					objectArrayLocal.add(new MovementObject(tempMatrix, new Point(listOfPointsLocal.get(0).x,listOfPointsLocal.get(0).y + 3)));
					//listOfMovements.add(new Point(listOfPointsLocal.get(0).x,listOfPointsLocal.get(0).y + 3));
					}
				//THREE CONSECUTIVES
			else if(listOfPointsLocal.get(0).y != 2 && listOfPointsLocal.get(0).y != 3 && listOfPointsLocal.get(0).y != 4 && listOfPointsLocal.get(0).y != 5 &&
					matrixToSearch[listOfPointsLocal.get(0).x][listOfPointsLocal.get(0).y + 2] == otherPlayer &&
						matrixToSearch[listOfPointsLocal.get(0).x][listOfPointsLocal.get(0).y + 3] == otherPlayer &&
						matrixToSearch[listOfPointsLocal.get(0).x][listOfPointsLocal.get(0).y + 4] == 0){
						tempMatrix[listOfPointsLocal.get(0).x][listOfPointsLocal.get(0).y + 1] = whosTurn;
						tempMatrix[listOfPointsLocal.get(0).x][listOfPointsLocal.get(0).y + 2] = whosTurn;
						tempMatrix[listOfPointsLocal.get(0).x][listOfPointsLocal.get(0).y + 3] = whosTurn;
						tempMatrix[listOfPointsLocal.get(0).x][listOfPointsLocal.get(0).y + 4] = whosTurn;
						objectArrayLocal.add(new MovementObject(tempMatrix, new Point(listOfPointsLocal.get(0).x,listOfPointsLocal.get(0).y + 4)));
				//listOfMovements.add(new Point(listOfPointsLocal.get(0).x,listOfPointsLocal.get(0).y + 4));
			}
				//FOUR CONSECUTIVES
			else if(listOfPointsLocal.get(0).y == 0 &&
					matrixToSearch[listOfPointsLocal.get(0).x][listOfPointsLocal.get(0).y + 2] == otherPlayer &&
						matrixToSearch[listOfPointsLocal.get(0).x][listOfPointsLocal.get(0).y + 3] == otherPlayer &&
						matrixToSearch[listOfPointsLocal.get(0).x][listOfPointsLocal.get(0).y + 4] == otherPlayer &&
						matrixToSearch[listOfPointsLocal.get(0).x][listOfPointsLocal.get(0).y + 5] == 0){
				tempMatrix[listOfPointsLocal.get(0).x][listOfPointsLocal.get(0).y + 1] = whosTurn;
				tempMatrix[listOfPointsLocal.get(0).x][listOfPointsLocal.get(0).y + 2] = whosTurn;
				tempMatrix[listOfPointsLocal.get(0).x][listOfPointsLocal.get(0).y + 3] = whosTurn;
				tempMatrix[listOfPointsLocal.get(0).x][listOfPointsLocal.get(0).y + 4] = whosTurn;
				tempMatrix[listOfPointsLocal.get(0).x][listOfPointsLocal.get(0).y + 5] = whosTurn;
				objectArrayLocal.add(new MovementObject(tempMatrix, new Point(listOfPointsLocal.get(0).x,listOfPointsLocal.get(0).y + 5)));
				//listOfMovements.add(new Point(listOfPointsLocal.get(0).x,listOfPointsLocal.get(0).y + 5));
			}
			}
			 
			//LEFT SEARCH
			for(int i = 0;i < matrixToSearch.length;i++)
				for(int j = 0;j < matrixToSearch.length;j ++)
					tempMatrix[i][j] = matrixToSearch[i][j];
			if(listOfPointsLocal.get(0).y != 0 && listOfPointsLocal.get(0).y != 1 && 
					matrixToSearch[listOfPointsLocal.get(0).x][listOfPointsLocal.get(0).y - 2] != whosTurn && 
					matrixToSearch[listOfPointsLocal.get(0).x][listOfPointsLocal.get(0).y - 1] == otherPlayer){
				if(matrixToSearch[listOfPointsLocal.get(0).x][listOfPointsLocal.get(0).y - 2] == 0){
					//ONE CONSECUTIVE
					tempMatrix[listOfPointsLocal.get(0).x][listOfPointsLocal.get(0).y - 1] = whosTurn;
					tempMatrix[listOfPointsLocal.get(0).x][listOfPointsLocal.get(0).y - 2] = whosTurn;
					objectArrayLocal.add(new MovementObject(tempMatrix, new Point(listOfPointsLocal.get(0).x,listOfPointsLocal.get(0).y - 2)));
					
				}
					//listOfMovements.add(new Point(listOfPointsLocal.get(0).x,listOfPointsLocal.get(0).y - 2));
					//TWO CONSECUTIVES
				else if(listOfPointsLocal.get(0).y != 2 &&
						matrixToSearch[listOfPointsLocal.get(0).x][listOfPointsLocal.get(0).y - 2] == otherPlayer &&
						matrixToSearch[listOfPointsLocal.get(0).x][listOfPointsLocal.get(0).y - 3] == 0){
					tempMatrix[listOfPointsLocal.get(0).x][listOfPointsLocal.get(0).y - 1] = whosTurn;
					tempMatrix[listOfPointsLocal.get(0).x][listOfPointsLocal.get(0).y - 2] = whosTurn;
					tempMatrix[listOfPointsLocal.get(0).x][listOfPointsLocal.get(0).y - 3] = whosTurn;
					objectArrayLocal.add(new MovementObject(tempMatrix, new Point(listOfPointsLocal.get(0).x,listOfPointsLocal.get(0).y - 3)));
					
						//listOfMovements.add(new Point(listOfPointsLocal.get(0).x,listOfPointsLocal.get(0).y - 3));
				}//THREE CONSECUTIVES
				else if(listOfPointsLocal.get(0).y != 3 && listOfPointsLocal.get(0).y != 2 &&
						matrixToSearch[listOfPointsLocal.get(0).x][listOfPointsLocal.get(0).y - 2] == otherPlayer &&
							matrixToSearch[listOfPointsLocal.get(0).x][listOfPointsLocal.get(0).y - 3] == otherPlayer &&
							matrixToSearch[listOfPointsLocal.get(0).x][listOfPointsLocal.get(0).y - 4] == 0){
					tempMatrix[listOfPointsLocal.get(0).x][listOfPointsLocal.get(0).y - 1] = whosTurn;
					tempMatrix[listOfPointsLocal.get(0).x][listOfPointsLocal.get(0).y - 2] = whosTurn;
					tempMatrix[listOfPointsLocal.get(0).x][listOfPointsLocal.get(0).y - 3] = whosTurn;
					tempMatrix[listOfPointsLocal.get(0).x][listOfPointsLocal.get(0).y - 4] = whosTurn;
					objectArrayLocal.add(new MovementObject(tempMatrix, new Point(listOfPointsLocal.get(0).x,listOfPointsLocal.get(0).y - 4)));
					
						//listOfMovements.add(new Point(listOfPointsLocal.get(0).x,listOfPointsLocal.get(0).y - 4));
				}//FOUR CONSECUTIVES
				else if(listOfPointsLocal.get(0).y == 5 &&
						matrixToSearch[listOfPointsLocal.get(0).x][listOfPointsLocal.get(0).y - 2] == otherPlayer &&
							matrixToSearch[listOfPointsLocal.get(0).x][listOfPointsLocal.get(0).y - 3] == otherPlayer &&
							matrixToSearch[listOfPointsLocal.get(0).x][listOfPointsLocal.get(0).y - 4] == otherPlayer &&
							matrixToSearch[listOfPointsLocal.get(0).x][listOfPointsLocal.get(0).y - 5] == 0){
					tempMatrix[listOfPointsLocal.get(0).x][listOfPointsLocal.get(0).y - 1] = whosTurn;
					tempMatrix[listOfPointsLocal.get(0).x][listOfPointsLocal.get(0).y - 2] = whosTurn;
					tempMatrix[listOfPointsLocal.get(0).x][listOfPointsLocal.get(0).y - 3] = whosTurn;
					tempMatrix[listOfPointsLocal.get(0).x][listOfPointsLocal.get(0).y - 4] = whosTurn;
					tempMatrix[listOfPointsLocal.get(0).x][listOfPointsLocal.get(0).y - 5] = whosTurn;
					objectArrayLocal.add(new MovementObject(tempMatrix, new Point(listOfPointsLocal.get(0).x,listOfPointsLocal.get(0).y - 5)));
					
					//listOfMovements.add(new Point(listOfPointsLocal.get(0).x,listOfPointsLocal.get(0).y - 5));
				}
			}
			listOfPointsLocal.remove(0);	
			
			
		}
		return objectArrayLocal;
	}
	//THIS METHOD SEARCH VERTICALLY IF THERE ARE MOVES, RETURN ALL THE MOVES IN AN ARRAT
	private List<MovementObject> SearchInColumns(int[][] matrixToSearch, int whosTurn, List<Point> listOfCards){
		int otherPlayer;
		List<Point> listOfPointsLocal = new ArrayList<Point>();
		List<MovementObject> objectArrayLocal = new ArrayList<MovementObject>();
		listOfPointsLocal.clear();
		listOfPointsLocal.addAll(listOfCards);
		int[][] tempMatrix = new int[6][6];
				
		if(whosTurn == 1)
			otherPlayer = 2;
		else otherPlayer = 1;
		
			
		while(!listOfPointsLocal.isEmpty()){
			//two to the left cannot be equal
			//cannot be 5 or 6
			//next one must be opponent card
			//two to the right must be blank
			//DOWN
			for(int i = 0;i < matrixToSearch.length;i++)
				for(int j = 0;j < matrixToSearch.length;j ++)
					tempMatrix[i][j] = matrixToSearch[i][j];
			if(listOfPointsLocal.get(0).x != 4 && listOfPointsLocal.get(0).x != 5 && 
					matrixToSearch[listOfPointsLocal.get(0).x + 2][listOfPointsLocal.get(0).y] != whosTurn
					&& matrixToSearch[listOfPointsLocal.get(0).x + 1][listOfPointsLocal.get(0).y] == otherPlayer){
				//ONE CONSECUTIVE
				if(matrixToSearch[listOfPointsLocal.get(0).x + 2][listOfPointsLocal.get(0).y] == 0){
					tempMatrix[listOfPointsLocal.get(0).x + 1][listOfPointsLocal.get(0).y] = whosTurn;
					tempMatrix[listOfPointsLocal.get(0).x + 2][listOfPointsLocal.get(0).y] = whosTurn;
					objectArrayLocal.add(new MovementObject(tempMatrix, new Point(listOfPointsLocal.get(0).x + 2,listOfPointsLocal.get(0).y)));
					
					//listOfMovements.add(new Point(listOfPointsLocal.get(0).x + 2,listOfPointsLocal.get(0).y));
				}//TWO CONSECUTIVES
				else if(listOfPointsLocal.get(0).x != 3 &&
						matrixToSearch[listOfPointsLocal.get(0).x + 2][listOfPointsLocal.get(0).y] == otherPlayer &&
						matrixToSearch[listOfPointsLocal.get(0).x + 3][listOfPointsLocal.get(0).y] == 0){
					tempMatrix[listOfPointsLocal.get(0).x + 1][listOfPointsLocal.get(0).y] = whosTurn;
					tempMatrix[listOfPointsLocal.get(0).x + 2][listOfPointsLocal.get(0).y] = whosTurn;
					tempMatrix[listOfPointsLocal.get(0).x + 3][listOfPointsLocal.get(0).y] = whosTurn;
					objectArrayLocal.add(new MovementObject(tempMatrix, new Point(listOfPointsLocal.get(0).x + 3,listOfPointsLocal.get(0).y)));
					
					//listOfMovements.add(new Point(listOfPointsLocal.get(0).x + 3,listOfPointsLocal.get(0).y));
				}//THREE CONSECUTIVES
				else if(listOfPointsLocal.get(0).x != 3 && listOfPointsLocal.get(0).x != 2 &&
						matrixToSearch[listOfPointsLocal.get(0).x + 2][listOfPointsLocal.get(0).y] == otherPlayer &&
							matrixToSearch[listOfPointsLocal.get(0).x + 3][listOfPointsLocal.get(0).y] == otherPlayer &&
							matrixToSearch[listOfPointsLocal.get(0).x + 4][listOfPointsLocal.get(0).y] == 0){
					tempMatrix[listOfPointsLocal.get(0).x + 1][listOfPointsLocal.get(0).y] = whosTurn;
					tempMatrix[listOfPointsLocal.get(0).x + 2][listOfPointsLocal.get(0).y] = whosTurn;
					tempMatrix[listOfPointsLocal.get(0).x + 3][listOfPointsLocal.get(0).y] = whosTurn;
					tempMatrix[listOfPointsLocal.get(0).x + 4][listOfPointsLocal.get(0).y] = whosTurn;
					objectArrayLocal.add(new MovementObject(tempMatrix, new Point(listOfPointsLocal.get(0).x + 4,listOfPointsLocal.get(0).y)));
					
			//listOfMovements.add(new Point(listOfPointsLocal.get(0).x + 4,listOfPointsLocal.get(0).y));
			}//FOUR CONSECUTIVES
				else if(listOfPointsLocal.get(0).x == 0 &&
						matrixToSearch[listOfPointsLocal.get(0).x + 2][listOfPointsLocal.get(0).y] == otherPlayer &&
							matrixToSearch[listOfPointsLocal.get(0).x + 3][listOfPointsLocal.get(0).y] == otherPlayer &&
							matrixToSearch[listOfPointsLocal.get(0).x + 4][listOfPointsLocal.get(0).y] == otherPlayer &&
							matrixToSearch[listOfPointsLocal.get(0).x + 5][listOfPointsLocal.get(0).y] == 0){
					tempMatrix[listOfPointsLocal.get(0).x + 1][listOfPointsLocal.get(0).y] = whosTurn;
					tempMatrix[listOfPointsLocal.get(0).x + 2][listOfPointsLocal.get(0).y] = whosTurn;
					tempMatrix[listOfPointsLocal.get(0).x + 3][listOfPointsLocal.get(0).y] = whosTurn;
					tempMatrix[listOfPointsLocal.get(0).x + 4][listOfPointsLocal.get(0).y] = whosTurn;
					tempMatrix[listOfPointsLocal.get(0).x + 5][listOfPointsLocal.get(0).y] = whosTurn;
					objectArrayLocal.add(new MovementObject(tempMatrix, new Point(listOfPointsLocal.get(0).x + 5,listOfPointsLocal.get(0).y)));
				
				}
			//listOfMovements.add(new Point(listOfPointsLocal.get(0).x + 5,listOfPointsLocal.get(0).y));
				}
				//UP
			for(int i = 0;i < matrixToSearch.length;i++)
				for(int j = 0;j < matrixToSearch.length;j ++)
					tempMatrix[i][j] = matrixToSearch[i][j];
			if(listOfPointsLocal.get(0).x != 0 && listOfPointsLocal.get(0).x != 1 && 
					matrixToSearch[listOfPointsLocal.get(0).x - 2][listOfPointsLocal.get(0).y] != whosTurn
					&& matrixToSearch[listOfPointsLocal.get(0).x - 1][listOfPointsLocal.get(0).y] == otherPlayer){
				//ONE CONSECUTIVE
				if(matrixToSearch[listOfPointsLocal.get(0).x - 2][listOfPointsLocal.get(0).y] == 0){
					tempMatrix[listOfPointsLocal.get(0).x - 1][listOfPointsLocal.get(0).y] = whosTurn;
					tempMatrix[listOfPointsLocal.get(0).x - 2][listOfPointsLocal.get(0).y] = whosTurn;
					objectArrayLocal.add(new MovementObject(tempMatrix, new Point(listOfPointsLocal.get(0).x - 2,listOfPointsLocal.get(0).y)));
					
				}
					//listOfMovements.add(new Point(listOfPointsLocal.get(0).x - 2,listOfPointsLocal.get(0).y));
					//TWO CONSECUTIVES
				else if(listOfPointsLocal.get(0).x != 2 && 
						matrixToSearch[listOfPointsLocal.get(0).x - 2][listOfPointsLocal.get(0).y] == otherPlayer &&
						matrixToSearch[listOfPointsLocal.get(0).x - 3][listOfPointsLocal.get(0).y] == 0){
					tempMatrix[listOfPointsLocal.get(0).x - 1][listOfPointsLocal.get(0).y] = whosTurn;
					tempMatrix[listOfPointsLocal.get(0).x - 2][listOfPointsLocal.get(0).y] = whosTurn;
					tempMatrix[listOfPointsLocal.get(0).x - 3][listOfPointsLocal.get(0).y] = whosTurn;
					objectArrayLocal.add(new MovementObject(tempMatrix, new Point(listOfPointsLocal.get(0).x - 3,listOfPointsLocal.get(0).y)));
					
				}
						//listOfMovements.add(new Point(listOfPointsLocal.get(0).x - 3,listOfPointsLocal.get(0).y));
					//THREE CONSECUTIVES
				else if(listOfPointsLocal.get(0).x != 2 && listOfPointsLocal.get(0).x != 3 &&
						matrixToSearch[listOfPointsLocal.get(0).x - 2][listOfPointsLocal.get(0).y] == otherPlayer &&
							matrixToSearch[listOfPointsLocal.get(0).x - 3][listOfPointsLocal.get(0).y] == otherPlayer &&
							matrixToSearch[listOfPointsLocal.get(0).x - 4][listOfPointsLocal.get(0).y] == 0){
					tempMatrix[listOfPointsLocal.get(0).x - 1][listOfPointsLocal.get(0).y] = whosTurn;
					tempMatrix[listOfPointsLocal.get(0).x - 2][listOfPointsLocal.get(0).y] = whosTurn;
					tempMatrix[listOfPointsLocal.get(0).x - 3][listOfPointsLocal.get(0).y] = whosTurn;
					tempMatrix[listOfPointsLocal.get(0).x - 4][listOfPointsLocal.get(0).y] = whosTurn;
					objectArrayLocal.add(new MovementObject(tempMatrix, new Point(listOfPointsLocal.get(0).x - 4,listOfPointsLocal.get(0).y)));
					
				}//	listOfMovements.add(new Point(listOfPointsLocal.get(0).x - 4,listOfPointsLocal.get(0).y));
					//FOUR CONSECUTIVES
				else if(listOfPointsLocal.get(0).x == 5 &&
						matrixToSearch[listOfPointsLocal.get(0).x - 2][listOfPointsLocal.get(0).y] == otherPlayer &&
							matrixToSearch[listOfPointsLocal.get(0).x - 3][listOfPointsLocal.get(0).y] == otherPlayer &&
							matrixToSearch[listOfPointsLocal.get(0).x - 4][listOfPointsLocal.get(0).y] == otherPlayer &&
							matrixToSearch[listOfPointsLocal.get(0).x - 5][listOfPointsLocal.get(0).y] == 0){
					tempMatrix[listOfPointsLocal.get(0).x - 1][listOfPointsLocal.get(0).y] = whosTurn;
					tempMatrix[listOfPointsLocal.get(0).x - 2][listOfPointsLocal.get(0).y] = whosTurn;
					tempMatrix[listOfPointsLocal.get(0).x - 3][listOfPointsLocal.get(0).y] = whosTurn;
					tempMatrix[listOfPointsLocal.get(0).x - 4][listOfPointsLocal.get(0).y] = whosTurn;
					tempMatrix[listOfPointsLocal.get(0).x - 5][listOfPointsLocal.get(0).y] = whosTurn;
					objectArrayLocal.add(new MovementObject(tempMatrix, new Point(listOfPointsLocal.get(0).x - 5,listOfPointsLocal.get(0).y)));
					
				}
				//listOfMovements.add(new Point(listOfPointsLocal.get(0).x - 5,listOfPointsLocal.get(0).y));
			}
			listOfPointsLocal.remove(0);	
			
			
		}
		return objectArrayLocal;
	}
	//RETURN ALL THE DIAGONAL MOVES
	private List<MovementObject> SearchInDiagonal(int[][] matrixToSearch, int whosTurn, List<Point> listOfCards){
		int otherPlayer;
		List<Point> listOfPointsLocal = new ArrayList<Point>();
		List<MovementObject> objectArrayLocal = new ArrayList<MovementObject>();
		listOfPointsLocal.clear();
		listOfPointsLocal.addAll(listOfCards);
		int[][] tempMatrix = new int[6][6];
		if(whosTurn == 1)
			otherPlayer = 2;
		else otherPlayer = 1;
		
			
		while(!listOfPointsLocal.isEmpty()){
			
			//DIAGONAL UP RIGHT (- +)
			for(int i = 0;i < matrixToSearch.length;i++)
				for(int j = 0;j < matrixToSearch.length;j ++)
					tempMatrix[i][j] = matrixToSearch[i][j];
				if(listOfPointsLocal.get(0).y != 4 && listOfPointsLocal.get(0).y != 5 &&
				listOfPointsLocal.get(0).x != 0 && listOfPointsLocal.get(0).x != 1 &&
				matrixToSearch[listOfPointsLocal.get(0).x - 2][listOfPointsLocal.get(0).y + 2] != whosTurn
				&& matrixToSearch[listOfPointsLocal.get(0).x - 1][listOfPointsLocal.get(0).y + 1] == otherPlayer){
				//ONE CONSECUITIVE
				if(	listOfPointsLocal.get(0).y != 5 && listOfPointsLocal.get(0).y != 4 &&
						listOfPointsLocal.get(0).y != 0 && listOfPointsLocal.get(0).y != 1 &&
					matrixToSearch[listOfPointsLocal.get(0).x - 2][listOfPointsLocal.get(0).y + 2] == 0){
					tempMatrix[listOfPointsLocal.get(0).x - 1][listOfPointsLocal.get(0).y + 1] = whosTurn;
					tempMatrix[listOfPointsLocal.get(0).x - 2][listOfPointsLocal.get(0).y + 2] = whosTurn;
					objectArrayLocal.add(new MovementObject(tempMatrix, new Point(listOfPointsLocal.get(0).x - 2,listOfPointsLocal.get(0).y + 2)));
					
				}
				//listOfMovements.add(new Point(listOfPointsLocal.get(0).x - 2,listOfPointsLocal.get(0).y + 2));
				//TWO CONSECUTIVES
				else if(listOfPointsLocal.get(0).y != 5 && listOfPointsLocal.get(0).y != 4 && listOfPointsLocal.get(0).y != 3 &&
						listOfPointsLocal.get(0).x != 0 && listOfPointsLocal.get(0).x != 2 && listOfPointsLocal.get(0).x != 1 &&
				matrixToSearch[listOfPointsLocal.get(0).x - 2][listOfPointsLocal.get(0).y + 2] == otherPlayer &&
				matrixToSearch[listOfPointsLocal.get(0).x - 3][listOfPointsLocal.get(0).y + 3] == 0){
					tempMatrix[listOfPointsLocal.get(0).x - 1][listOfPointsLocal.get(0).y + 1] = whosTurn;
					tempMatrix[listOfPointsLocal.get(0).x - 2][listOfPointsLocal.get(0).y + 2] = whosTurn;
					tempMatrix[listOfPointsLocal.get(0).x - 3][listOfPointsLocal.get(0).y + 3] = whosTurn;
					objectArrayLocal.add(new MovementObject(tempMatrix, new Point(listOfPointsLocal.get(0).x - 3,listOfPointsLocal.get(0).y + 3)));
					
				}
				//listOfMovements.add(new Point(listOfPointsLocal.get(0).x - 3,listOfPointsLocal.get(0).y + 3));
				//THREE CONSECUTIVES
				else if(listOfPointsLocal.get(0).x != 2 && listOfPointsLocal.get(0).x != 3 && listOfPointsLocal.get(0).x != 0 && listOfPointsLocal.get(0).x != 1 && 
					listOfPointsLocal.get(0).y != 3 && listOfPointsLocal.get(0).y != 4 && listOfPointsLocal.get(0).y != 5 && listOfPointsLocal.get(0).y != 2 && 
					matrixToSearch[listOfPointsLocal.get(0).x - 2][listOfPointsLocal.get(0).y + 2] == otherPlayer &&
				matrixToSearch[listOfPointsLocal.get(0).x - 3][listOfPointsLocal.get(0).y + 3] == otherPlayer &&
				matrixToSearch[listOfPointsLocal.get(0).x - 4][listOfPointsLocal.get(0).y + 4] == 0){
					tempMatrix[listOfPointsLocal.get(0).x - 1][listOfPointsLocal.get(0).y + 1] = whosTurn;
					tempMatrix[listOfPointsLocal.get(0).x - 2][listOfPointsLocal.get(0).y + 2] = whosTurn;
					tempMatrix[listOfPointsLocal.get(0).x - 3][listOfPointsLocal.get(0).y + 3] = whosTurn;
					tempMatrix[listOfPointsLocal.get(0).x - 4][listOfPointsLocal.get(0).y + 4] = whosTurn;
					objectArrayLocal.add(new MovementObject(tempMatrix, new Point(listOfPointsLocal.get(0).x - 4,listOfPointsLocal.get(0).y + 4)));
					
				}
				//listOfMovements.add(new Point(listOfPointsLocal.get(0).x - 4,listOfPointsLocal.get(0).y + 4));
				//FOUR CONSECUTIVES
				else if(listOfPointsLocal.get(0).x == 5 && listOfPointsLocal.get(0).y == 0 && 
				matrixToSearch[listOfPointsLocal.get(0).x - 2][listOfPointsLocal.get(0).y + 2] == otherPlayer &&
				matrixToSearch[listOfPointsLocal.get(0).x - 3][listOfPointsLocal.get(0).y + 3] == otherPlayer &&
				matrixToSearch[listOfPointsLocal.get(0).x - 4][listOfPointsLocal.get(0).y + 4] == otherPlayer &&
				matrixToSearch[listOfPointsLocal.get(0).x - 5][listOfPointsLocal.get(0).y + 5] == 0){
					tempMatrix[listOfPointsLocal.get(0).x - 1][listOfPointsLocal.get(0).y + 1] = whosTurn;
					tempMatrix[listOfPointsLocal.get(0).x - 2][listOfPointsLocal.get(0).y + 2] = whosTurn;
					tempMatrix[listOfPointsLocal.get(0).x - 3][listOfPointsLocal.get(0).y + 3] = whosTurn;
					tempMatrix[listOfPointsLocal.get(0).x - 4][listOfPointsLocal.get(0).y + 4] = whosTurn;
					tempMatrix[listOfPointsLocal.get(0).x - 5][listOfPointsLocal.get(0).y + 5] = whosTurn;
					objectArrayLocal.add(new MovementObject(tempMatrix, new Point(listOfPointsLocal.get(0).x - 5,listOfPointsLocal.get(0).y + 5)));
						
				}
				//listOfMovements.add(new Point(listOfPointsLocal.get(0).x - 5,listOfPointsLocal.get(0).y + 5));
			}
			//DIAGONAL UP LEFT (- -)
				for(int i = 0;i < matrixToSearch.length;i++)
					for(int j = 0;j < matrixToSearch.length;j ++)
						tempMatrix[i][j] = matrixToSearch[i][j];
			if(listOfPointsLocal.get(0).y != 0 && listOfPointsLocal.get(0).y != 1 &&
					listOfPointsLocal.get(0).x != 0 && listOfPointsLocal.get(0).x != 1 &&
					matrixToSearch[listOfPointsLocal.get(0).x - 2][listOfPointsLocal.get(0).y - 2] != whosTurn
					&& matrixToSearch[listOfPointsLocal.get(0).x - 1][listOfPointsLocal.get(0).y - 1] == otherPlayer){
				//ONE CONSECUTIVE
				if(matrixToSearch[listOfPointsLocal.get(0).x - 2][listOfPointsLocal.get(0).y - 2] == 0){
					tempMatrix[listOfPointsLocal.get(0).x - 1][listOfPointsLocal.get(0).y - 1] = whosTurn;
					tempMatrix[listOfPointsLocal.get(0).x - 2][listOfPointsLocal.get(0).y - 2] = whosTurn;
					objectArrayLocal.add(new MovementObject(tempMatrix, new Point(listOfPointsLocal.get(0).x - 2,listOfPointsLocal.get(0).y - 2)));
					
				}
				//listOfMovements.add(new Point(listOfPointsLocal.get(0).x - 2,listOfPointsLocal.get(0).y - 2));
				//TWO CONSECUTIVES
				else if(listOfPointsLocal.get(0).x != 1 && listOfPointsLocal.get(0).x != 2 && listOfPointsLocal.get(0).x != 0 && 
						listOfPointsLocal.get(0).y != 0 && listOfPointsLocal.get(0).y != 1 && listOfPointsLocal.get(0).y != 2 && 
				matrixToSearch[listOfPointsLocal.get(0).x - 2][listOfPointsLocal.get(0).y - 2] == otherPlayer &&
				matrixToSearch[listOfPointsLocal.get(0).x - 3][listOfPointsLocal.get(0).y - 3] == 0){
					tempMatrix[listOfPointsLocal.get(0).x - 1][listOfPointsLocal.get(0).y - 1] = whosTurn;
					tempMatrix[listOfPointsLocal.get(0).x - 2][listOfPointsLocal.get(0).y - 2] = whosTurn;
					tempMatrix[listOfPointsLocal.get(0).x - 3][listOfPointsLocal.get(0).y - 3] = whosTurn;
					objectArrayLocal.add(new MovementObject(tempMatrix, new Point(listOfPointsLocal.get(0).x - 3,listOfPointsLocal.get(0).y - 3)));
				}
				//listOfMovements.add(new Point(listOfPointsLocal.get(0).x - 3,listOfPointsLocal.get(0).y - 3));
				//THREE CONSECUTIVES
				else if(listOfPointsLocal.get(0).x != 2 && listOfPointsLocal.get(0).y != 2 && 
					listOfPointsLocal.get(0).x != 3 && listOfPointsLocal.get(0).y != 3 &&
					matrixToSearch[listOfPointsLocal.get(0).x - 2][listOfPointsLocal.get(0).y - 2] == otherPlayer &&
				matrixToSearch[listOfPointsLocal.get(0).x - 3][listOfPointsLocal.get(0).y - 3] == otherPlayer &&
				matrixToSearch[listOfPointsLocal.get(0).x - 4][listOfPointsLocal.get(0).y - 4] == 0){
					tempMatrix[listOfPointsLocal.get(0).x - 1][listOfPointsLocal.get(0).y - 1] = whosTurn;
					tempMatrix[listOfPointsLocal.get(0).x - 2][listOfPointsLocal.get(0).y - 2] = whosTurn;
					tempMatrix[listOfPointsLocal.get(0).x - 3][listOfPointsLocal.get(0).y - 3] = whosTurn;
					tempMatrix[listOfPointsLocal.get(0).x - 4][listOfPointsLocal.get(0).y - 4] = whosTurn;
					objectArrayLocal.add(new MovementObject(tempMatrix, new Point(listOfPointsLocal.get(0).x - 4,listOfPointsLocal.get(0).y - 4)));
				
				}
				//listOfMovements.add(new Point(listOfPointsLocal.get(0).x - 4,listOfPointsLocal.get(0).y - 4));
				//FOUR CONSECUTIVES
				else if(listOfPointsLocal.get(0).x == 5 && listOfPointsLocal.get(0).y == 5 && 
				matrixToSearch[listOfPointsLocal.get(0).x - 2][listOfPointsLocal.get(0).y - 2] == otherPlayer &&
				matrixToSearch[listOfPointsLocal.get(0).x - 3][listOfPointsLocal.get(0).y - 3] == otherPlayer &&
				matrixToSearch[listOfPointsLocal.get(0).x - 4][listOfPointsLocal.get(0).y - 4] == otherPlayer &&
				matrixToSearch[listOfPointsLocal.get(0).x - 5][listOfPointsLocal.get(0).y - 5] == 0){
					tempMatrix[listOfPointsLocal.get(0).x - 1][listOfPointsLocal.get(0).y - 1] = whosTurn;
					tempMatrix[listOfPointsLocal.get(0).x - 2][listOfPointsLocal.get(0).y - 2] = whosTurn;
					tempMatrix[listOfPointsLocal.get(0).x - 3][listOfPointsLocal.get(0).y - 3] = whosTurn;
					tempMatrix[listOfPointsLocal.get(0).x - 4][listOfPointsLocal.get(0).y - 4] = whosTurn;
					tempMatrix[listOfPointsLocal.get(0).x - 5][listOfPointsLocal.get(0).y - 5] = whosTurn;
					objectArrayLocal.add(new MovementObject(tempMatrix, new Point(listOfPointsLocal.get(0).x - 5,listOfPointsLocal.get(0).y - 5)));
				
				}
				//listOfMovements.add(new Point(listOfPointsLocal.get(0).x - 5,listOfPointsLocal.get(0).y - 5));
			}
			//DIAGONAL DOWN LEFT (+ -)
			for(int i = 0;i < matrixToSearch.length;i++)
				for(int j = 0;j < matrixToSearch.length;j ++)
					tempMatrix[i][j] = matrixToSearch[i][j];
			if(listOfPointsLocal.get(0).y != 0 && listOfPointsLocal.get(0).y != 1 &&
					listOfPointsLocal.get(0).x != 4 && listOfPointsLocal.get(0).x != 5 &&
					matrixToSearch[listOfPointsLocal.get(0).x + 2][listOfPointsLocal.get(0).y - 2] != whosTurn
					&& matrixToSearch[listOfPointsLocal.get(0).x + 1][listOfPointsLocal.get(0).y - 1] == otherPlayer){
				//ONE CONSECUITIVE
				if(listOfPointsLocal.get(0).x != 0 && listOfPointsLocal.get(0).y != 0 &&
					matrixToSearch[listOfPointsLocal.get(0).x + 2][listOfPointsLocal.get(0).y - 2] == 0){
					tempMatrix[listOfPointsLocal.get(0).x + 1][listOfPointsLocal.get(0).y - 1] = whosTurn;
					tempMatrix[listOfPointsLocal.get(0).x + 2][listOfPointsLocal.get(0).y - 2] = whosTurn;
					objectArrayLocal.add(new MovementObject(tempMatrix, new Point(listOfPointsLocal.get(0).x + 2,listOfPointsLocal.get(0).y - 2)));
					
				}
				//listOfMovements.add(new Point(listOfPointsLocal.get(0).x - 2,listOfPointsLocal.get(0).y - 2));
				//TWO CONSECUTIVES
				else if(listOfPointsLocal.get(0).y != 0 && 	listOfPointsLocal.get(0).y != 1 &&listOfPointsLocal.get(0).y != 2 &&
						listOfPointsLocal.get(0).x != 5 &&listOfPointsLocal.get(0).x != 4 &&listOfPointsLocal.get(0).x != 3 &&
				matrixToSearch[listOfPointsLocal.get(0).x + 2][listOfPointsLocal.get(0).y - 2] == otherPlayer &&
				matrixToSearch[listOfPointsLocal.get(0).x + 3][listOfPointsLocal.get(0).y - 3] == 0){
					tempMatrix[listOfPointsLocal.get(0).x + 1][listOfPointsLocal.get(0).y - 1] = whosTurn;
					tempMatrix[listOfPointsLocal.get(0).x + 2][listOfPointsLocal.get(0).y - 2] = whosTurn;
					tempMatrix[listOfPointsLocal.get(0).x + 3][listOfPointsLocal.get(0).y - 3] = whosTurn;
					objectArrayLocal.add(new MovementObject(tempMatrix, new Point(listOfPointsLocal.get(0).x + 3,listOfPointsLocal.get(0).y - 3)));
					
				}
				//listOfMovements.add(new Point(listOfPointsLocal.get(0).x + 3,listOfPointsLocal.get(0).y - 3));
				//THREE CONSECUTIVES
				else if(listOfPointsLocal.get(0).y != 0 && listOfPointsLocal.get(0).y != 1 && 
					listOfPointsLocal.get(0).y != 2 && listOfPointsLocal.get(0).y != 3 &&
					listOfPointsLocal.get(0).x != 5 &&listOfPointsLocal.get(0).x != 4 && listOfPointsLocal.get(0).x != 3 &&
					listOfPointsLocal.get(0).x != 2 &&
					matrixToSearch[listOfPointsLocal.get(0).x + 2][listOfPointsLocal.get(0).y - 2] == otherPlayer &&
				matrixToSearch[listOfPointsLocal.get(0).x + 3][listOfPointsLocal.get(0).y - 3] == otherPlayer &&
				matrixToSearch[listOfPointsLocal.get(0).x + 4][listOfPointsLocal.get(0).y - 4] == 0){
					tempMatrix[listOfPointsLocal.get(0).x + 1][listOfPointsLocal.get(0).y - 1] = whosTurn;
					tempMatrix[listOfPointsLocal.get(0).x + 2][listOfPointsLocal.get(0).y - 2] = whosTurn;
					tempMatrix[listOfPointsLocal.get(0).x + 3][listOfPointsLocal.get(0).y - 3] = whosTurn;
					tempMatrix[listOfPointsLocal.get(0).x + 4][listOfPointsLocal.get(0).y - 4] = whosTurn;
					objectArrayLocal.add(new MovementObject(tempMatrix, new Point(listOfPointsLocal.get(0).x + 4,listOfPointsLocal.get(0).y - 4)));
					
				}
				//listOfMovements.add(new Point(listOfPointsLocal.get(0).x + 4,listOfPointsLocal.get(0).y - 4));
				//FOUR CONSECUTIVES
				else if(listOfPointsLocal.get(0).x == 0 && listOfPointsLocal.get(0).y == 5 && 
				matrixToSearch[listOfPointsLocal.get(0).x + 2][listOfPointsLocal.get(0).y - 2] == otherPlayer &&
				matrixToSearch[listOfPointsLocal.get(0).x + 3][listOfPointsLocal.get(0).y - 3] == otherPlayer &&
				matrixToSearch[listOfPointsLocal.get(0).x + 4][listOfPointsLocal.get(0).y - 4] == otherPlayer &&
				matrixToSearch[listOfPointsLocal.get(0).x + 5][listOfPointsLocal.get(0).y - 5] == 0){
					tempMatrix[listOfPointsLocal.get(0).x + 1][listOfPointsLocal.get(0).y - 1] = whosTurn;
					tempMatrix[listOfPointsLocal.get(0).x + 2][listOfPointsLocal.get(0).y - 2] = whosTurn;
					tempMatrix[listOfPointsLocal.get(0).x + 3][listOfPointsLocal.get(0).y - 3] = whosTurn;
					tempMatrix[listOfPointsLocal.get(0).x + 4][listOfPointsLocal.get(0).y - 4] = whosTurn;
					tempMatrix[listOfPointsLocal.get(0).x + 5][listOfPointsLocal.get(0).y - 5] = whosTurn;
					objectArrayLocal.add(new MovementObject(tempMatrix, new Point(listOfPointsLocal.get(0).x + 5,listOfPointsLocal.get(0).y - 5)));
					
				}
				//listOfMovements.add(new Point(listOfPointsLocal.get(0).x + 5,listOfPointsLocal.get(0).y - 5));
			}
			//DIAGONAL DOWN RIGHT (+ +)
			for(int i = 0;i < matrixToSearch.length;i++)
				for(int j = 0;j < matrixToSearch.length;j ++)
					tempMatrix[i][j] = matrixToSearch[i][j];
			if(listOfPointsLocal.get(0).y != 5 && listOfPointsLocal.get(0).y != 4 &&
					listOfPointsLocal.get(0).x != 5 && listOfPointsLocal.get(0).x != 4 &&
					matrixToSearch[listOfPointsLocal.get(0).x + 2][listOfPointsLocal.get(0).y + 2] != whosTurn
					&& matrixToSearch[listOfPointsLocal.get(0).x + 1][listOfPointsLocal.get(0).y + 1] == otherPlayer){
				//ONE CONSECUITIVE
				if(listOfPointsLocal.get(0).y != 5 && 	listOfPointsLocal.get(0).y != 5 &&
					matrixToSearch[listOfPointsLocal.get(0).x + 2][listOfPointsLocal.get(0).y + 2] == 0){
					tempMatrix[listOfPointsLocal.get(0).x + 1][listOfPointsLocal.get(0).y + 1] = whosTurn;
					tempMatrix[listOfPointsLocal.get(0).x + 2][listOfPointsLocal.get(0).y + 2] = whosTurn;
					objectArrayLocal.add(new MovementObject(tempMatrix, new Point(listOfPointsLocal.get(0).x + 2,listOfPointsLocal.get(0).y + 2)));
					
				}
				//listOfMovements.add(new Point(listOfPointsLocal.get(0).x + 2,listOfPointsLocal.get(0).y + 2));
				//TWO CONSECUTIVES
				else if(listOfPointsLocal.get(0).x != 5 && listOfPointsLocal.get(0).x != 4 &&
						listOfPointsLocal.get(0).x != 3 && listOfPointsLocal.get(0).y != 3 &&
						listOfPointsLocal.get(0).y != 5 && listOfPointsLocal.get(0).y != 4 &&
						matrixToSearch[listOfPointsLocal.get(0).x + 2][listOfPointsLocal.get(0).y + 2] == otherPlayer &&
						matrixToSearch[listOfPointsLocal.get(0).x + 3][listOfPointsLocal.get(0).y + 3] == 0){
					tempMatrix[listOfPointsLocal.get(0).x + 1][listOfPointsLocal.get(0).y + 1] = whosTurn;
					tempMatrix[listOfPointsLocal.get(0).x + 2][listOfPointsLocal.get(0).y + 2] = whosTurn;
					tempMatrix[listOfPointsLocal.get(0).x + 3][listOfPointsLocal.get(0).y + 3] = whosTurn;
					objectArrayLocal.add(new MovementObject(tempMatrix, new Point(listOfPointsLocal.get(0).x + 3,listOfPointsLocal.get(0).y + 3)));
			}
				//listOfMovements.add(new Point(listOfPointsLocal.get(0).x + 3,listOfPointsLocal.get(0).y + 3));
				//THREE CONSECUTIVES
				else if(listOfPointsLocal.get(0).x != 5 && listOfPointsLocal.get(0).x != 4 &&
						listOfPointsLocal.get(0).x != 3 && listOfPointsLocal.get(0).y != 3 &&
						listOfPointsLocal.get(0).y != 5 && listOfPointsLocal.get(0).y != 4 &&
						listOfPointsLocal.get(0).y != 2 && listOfPointsLocal.get(0).y != 2 &&
					listOfPointsLocal.get(0).x != 2 && listOfPointsLocal.get(0).y != 2 &&
					matrixToSearch[listOfPointsLocal.get(0).x + 2][listOfPointsLocal.get(0).y + 2] == otherPlayer &&
				matrixToSearch[listOfPointsLocal.get(0).x + 3][listOfPointsLocal.get(0).y + 3] == otherPlayer &&
				matrixToSearch[listOfPointsLocal.get(0).x + 4][listOfPointsLocal.get(0).y + 4] == 0){
					tempMatrix[listOfPointsLocal.get(0).x + 1][listOfPointsLocal.get(0).y + 1] = whosTurn;
					tempMatrix[listOfPointsLocal.get(0).x + 2][listOfPointsLocal.get(0).y + 2] = whosTurn;
					tempMatrix[listOfPointsLocal.get(0).x + 3][listOfPointsLocal.get(0).y + 3] = whosTurn;
					tempMatrix[listOfPointsLocal.get(0).x + 4][listOfPointsLocal.get(0).y + 4] = whosTurn;
					objectArrayLocal.add(new MovementObject(tempMatrix, new Point(listOfPointsLocal.get(0).x + 4,listOfPointsLocal.get(0).y + 4)));
				}
				//listOfMovements.add(new Point(listOfPointsLocal.get(0).x + 4,listOfPointsLocal.get(0).y + 4));
				//FOUR CONSECUTIVES
				else if(listOfPointsLocal.get(0).x == 0 && listOfPointsLocal.get(0).y == 0 && 
				matrixToSearch[listOfPointsLocal.get(0).x + 2][listOfPointsLocal.get(0).y + 2] == otherPlayer &&
				matrixToSearch[listOfPointsLocal.get(0).x + 3][listOfPointsLocal.get(0).y + 3] == otherPlayer &&
				matrixToSearch[listOfPointsLocal.get(0).x + 4][listOfPointsLocal.get(0).y + 4] == otherPlayer &&
				matrixToSearch[listOfPointsLocal.get(0).x + 5][listOfPointsLocal.get(0).y + 5] == 0){
					tempMatrix[listOfPointsLocal.get(0).x + 1][listOfPointsLocal.get(0).y + 1] = whosTurn;
					tempMatrix[listOfPointsLocal.get(0).x + 2][listOfPointsLocal.get(0).y + 2] = whosTurn;
					tempMatrix[listOfPointsLocal.get(0).x + 3][listOfPointsLocal.get(0).y + 3] = whosTurn;
					tempMatrix[listOfPointsLocal.get(0).x + 4][listOfPointsLocal.get(0).y + 4] = whosTurn;
					tempMatrix[listOfPointsLocal.get(0).x + 5][listOfPointsLocal.get(0).y + 5] = whosTurn;
					objectArrayLocal.add(new MovementObject(tempMatrix, new Point(listOfPointsLocal.get(0).x + 5,listOfPointsLocal.get(0).y + 5)));
				
				}
				//listOfMovements.add(new Point(listOfPointsLocal.get(0).x + 5,listOfPointsLocal.get(0).y + 5));
			}
			listOfPointsLocal.remove(0);	
			
			
		}
		return objectArrayLocal;
}
	//CONCATENATE THE DUPLICATE MOVES, A DUPLICATE MOVE MEANS THAT MORE THAN ONE MOVE IS GOING TO BE PERFORMED WITH A SINGLE ONE
private void CheckForDuplicatesPoints(List<MovementObject> arrayToSearch, int[][] workingMatrix, int whosTurn) {
	//INITIALIZE VARIABLES	
	MovementObject moveToCheck;
		int[][] matrixToUse = new int[6][6];
		int[][] substractionMatrix = new int[6][6];
		List<MovementObject> arrayToErase = new ArrayList<MovementObject>();
		arrayToErase.addAll(arrayToSearch);
		int carrier = 0;
		boolean isThereASubstraction = false;
		for(int x = 0; x < substractionMatrix.length; x ++)
			for(int y = 0; y < substractionMatrix.length; y ++)
				matrixToUse[x][y] = workingMatrix[x][y]; //COPY MATRIX
		
		while(carrier < arrayToErase.size()){
			moveToCheck = arrayToErase.get(carrier);
			int i = 0;
			//LOOP TO CHECK IF THERE IS A DUPLICATED MOVE
			loop:
			for(i = 0; i < arrayToErase.size(); i ++){
				if(arrayToErase.get(i).pointToPlace.x == moveToCheck.pointToPlace.x && 
						arrayToErase.get(i).pointToPlace.y == moveToCheck.pointToPlace.y && !arrayToErase.get(i).equals(moveToCheck)){
					for(int x = 0; x < substractionMatrix.length; x ++)
						for(int y = 0; y < substractionMatrix.length; y ++)
					substractionMatrix[x][y] = arrayToErase.get(i).howMatrixWouldBe[x][y] - moveToCheck.howMatrixWouldBe[x][y];
					isThereASubstraction = true;
					break loop;
				}
			}
			//IF THERE IS A DUPLICATED MOVE
		if(isThereASubstraction){
			for(int x = 0; x < substractionMatrix.length; x ++)
				for(int y = 0; y < substractionMatrix.length; y ++)
			if(substractionMatrix[x][y] != 0)
				matrixToUse[x][y] = whosTurn;
				matrixToUse[moveToCheck.pointToPlace.x][moveToCheck.pointToPlace.y] = whosTurn;
				if(carrier > i){
			arrayToErase.remove(carrier);
			arrayToErase.remove(i);
			}else{
				arrayToErase.remove(i);
				arrayToErase.remove(carrier);
			}
			arrayToErase.add(new MovementObject(matrixToUse, moveToCheck.pointToPlace));
			for(int x = 0; x < substractionMatrix.length; x ++)
				for(int y = 0; y < substractionMatrix.length; y ++)
					matrixToUse[x][y] = workingMatrix[x][y];
			carrier = -1;
			isThereASubstraction = false;
		}
		carrier ++;
		
		}
	arrayToSearch.clear();
	arrayToSearch.addAll(arrayToErase); //UPDATE NEW ARRAY WITH CONCATENATED MOVES
	}

//CHECK WHO WON ONCE THE GAME HAS ENDED
public int CheckWhoWon(int[][] lastMatrix){
	int carrier1 = 0, carrier2 = 0;
	int returnVal = 0;
	for(int i = 0; i < lastMatrix.length; i ++){
		for(int j = 0; j < lastMatrix.length; j ++){
			if(lastMatrix[i][j] == 1){
				carrier1 ++;
			}else if(lastMatrix[i][j] == 2){
				carrier2 ++;
			}
		}
	}
	
	if(carrier1 > carrier2)
	returnVal = 1;
	else if (carrier1 < carrier2)
	returnVal = 2;
	else
	returnVal = 0;
	return returnVal;
}


}
